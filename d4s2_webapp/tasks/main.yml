- name: Make nginx directory
  file: path={{ d4s2_nginx.conf_dir }} state=directory
  tags: ['api','ui']
- name: Place nginx conf
  copy: src="{{ d4s2_nginx.conf_file }}"
        dest="{{ d4s2_nginx.conf_dir }}/{{ d4s2_nginx.conf_file }}"
        mode=0400
        setype="svirt_sandbox_file_t"
  tags: ['api','ui']
- name: Create Database container
  docker_container:
    image: postgres:9.5
    name: db
    networks:
      - name: "{{ d4s2_docker_network }}"
    env: "{{ d4s2_docker_env }}"
    volumes:
      - /var/lib/postgresql/data:/var/lib/postgresql/data
    pull: false
    state: started
    restart_policy: always
  tags: ['api']
- name: Create app container
  docker_container:
    image: "{{ d4s2_docker_image }}"
    name: d4s2-app
    networks:
      - name: "{{ d4s2_docker_network }}"
    env: "{{ d4s2_docker_env }}"
    pull: false
    state: started
    restart_policy: always
  tags: ['api']
- name: Create download service container
  docker_container:
    image: "{{ d4s2_docker_image }}"
    name: d4s2-download
    networks:
      - name: "{{ d4s2_docker_network }}"
    env: "{{ d4s2_docker_env | combine({'GUNICORN_CMD_ARGS':'--worker-class gevent'})}}"
    pull: false
    state: started
    restart_policy: always
- name: Create task processor container
  docker_container:
    image: "{{ d4s2_docker_image }}"
    name: worker
    networks:
      - name: "{{ d4s2_docker_network }}"
    env: "{{ d4s2_docker_env }}"
    pull: false
    state: started
    restart_policy: always
    command: python manage.py process_tasks
  tags: ['api']
- name: Create UI container
  docker_container:
    image: "{{ datadelivery_ui_docker_image }}"
    name: ui
    networks:
      - name: "{{ d4s2_docker_network }}"
    state: started
    restart_policy: always
  tags: ['ui']
- name: Create reverse proxy web container
  docker_container:
    image: nginx:1.13
    name: web
    networks:
      - name: "{{ d4s2_docker_network }}"
    volumes:
      - "{{ d4s2_nginx.conf_dir }}/{{ d4s2_nginx.conf_file }}:/etc/nginx/nginx.conf:ro"
      - "{{ docker_webapp.ssl_dir }}/{{ docker_webapp.ssl_cert_file }}:/etc/nginx/cert.crt:ro"
      - "{{ docker_webapp.ssl_dir }}/{{ docker_webapp.ssl_key_file }}:/etc/nginx/cert.key:ro"
    ports:
      - "80:80"
      - "443:443"
    pull: false
    state: started
    restart_policy: always
  tags: ['api','ui']
